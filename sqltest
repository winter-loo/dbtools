#!/usr/bin/env python3
import psycopg2
import sys
import decimal
from decimal import Decimal

if len(sys.argv) != 2:
    print("usage: python3 sqltest.py <sql_test_file>")
    sys.exit(1)

sqlfile = sys.argv[1]
print(f"testing {sqlfile}")

g_conn = psycopg2.connect(database="oracle",
                        host="127.0.0.1",
                        user="lightdb",
                        port="5433")
g_conn.autocommit = True
g_cursor = g_conn.cursor()
g_cursor.execute("select pg_backend_pid()");

print(f"lightdb backend pid: {g_cursor.fetchone()[0]}")

def getExpectedValue(comment):
    """
    allow comment formats:
    --= 1[, ....]
    --= date 20231108
    --= '1'
    --= str 1
    --= num 1
    --= str '1'
    --= null
    --= datetime '20231108 09:00:00'
    --= datetimetz '20231108 09:00:00+08:00'
    --= error
    --= error, this is a description
    """
    cmt = comment[4:]
    arr = cmt.split(",")
    raw_val = arr[0]
    desc = ",".join(arr[1:]) if len(arr) > 1 else None
    # print(f"expected val: `{raw_val}`", end = "")
    # if desc != None:
    #     print(f", description: {desc}")
    # else:
    #     print()
    
    expected = None
    if raw_val.find(' ') == -1:
        if raw_val.startswith("error"):
            expected = "error"
        elif raw_val == "null":
            expected = "null"
        elif raw_val.find("\'") != -1:
            raw_val = raw_val.strip("\'")
            expected = f"str {raw_val}"
        elif raw_val.find("\"") != -1:
            raw_val = raw_val.strip("\"")
            expected = f"str {raw_val}"
        else:
            try:
                Decimal(raw_val)
                expected = f"num {raw_val}"
            except decimal.InvalidOperation:
                expected = f"str {raw_val}"
    else:
        expected = raw_val

    return expected
    

def executeSql(sql, fetch=True, bind_data=()):
    if sql == None or len(sql) == 0:
        return None
    # print("will execute sql: ", end='')
    # if sql.find("\n") != -1:
    #     print()
    # print(sql)

    try:
        g_cursor.execute(sql, bind_data)
        if fetch:
            actual, *rest = g_cursor.fetchone()
    except psycopg2.Error as e:
        msg = f"{e}".strip().split("\n")[0]
        actual = f"error '{msg}'"
        if not fetch:
            print(f"\033[0;31mUNEXPECTED ERROR\033[0m: sql `{sql}`, {actual}")
        g_cursor.execute("rollback")
    if fetch:
        return actual
    return None


def isEqual(expected, actual):
    # print(f"expected: `{expected}`, actual: `{actual}`")
    if expected.find(" ") != -1:
        typname, typval = expected.split(" ", maxsplit=1)
    else:
        typname = expected
        typval = expected

    if typname == "null":
        expected = typval
    elif typname == "num":
        expected = Decimal(typval)
    elif typname == "int2" or typname == "int4" or typname == "int8" or \
        typname == "int" or typname == "smallint" or typname == "bigint":
        expected = int(typval)
    elif typname == "float" or typname == "float4" or typname == "float8":
        expected = float(typval)
    elif typname == "str":
        expected = typval
    elif typname == "date":
        pass
    elif typname == "time":
        pass
    elif typname == "datetime":
        pass
    elif typname == "datetimetz":
        pass
    elif typname == "timestamp":
        pass
    elif typname == "timestamptz":
        pass
    elif typname == "error":
        expected = typval.strip("\'").strip("\"")
    else:
        raise ValueError("unknown type name")

    if isinstance(actual, str) and actual.startswith("error") and typname == "error":
        return expected == "error" or expected == actual.split()[1]
        
    return expected == actual


class Statis(object):
    def __init__(self):
        self.num_sql_tested = 0
        self.passed = 0
        self.failed = 0
        self.failed_sql = []

    def display(self):
        print()
        print("====================SUMMARY====================")
        summary = (
            f"SQL File: {sqlfile}\n"
            f"The number of sql statements executed: {self.num_sql_tested}, "
            f"passed: {self.passed}, "
            f"failed: {self.failed}."
        )
        print(summary)
        if self.failed > 0:
            # print("Failed sql statements:\n")
            i = 1
            for sql in self.failed_sql:
                print(f"{i}) at line {sql[0]}\n")
                print(f"\t{sql[1]};\n")
                i += 1
        print("===============================================")
        print()

g_statis = Statis();

# a flag to allow DDL statements
expected = None
sql = ""
sql_block = None
sql_block_lino = None
sql_block_expected = None
in_sql_code_block = False

lino = 0
with open(sqlfile, "r") as f:
    for line in f:
        lino += 1
        line = line.rstrip()
        if len(line) == 0:
            continue
        elif line.startswith("/"):
            continue
        elif line.startswith("--= "):
            expected = getExpectedValue(line)
        elif line.startswith("---{"):
            if in_sql_code_block:
                raise RuntimeError("nested sql code block is not supported yet")
            in_sql_code_block = True
            sql_block = ""
            sql_block_lino = lino
            sql_block_expected = expected
            expected = None
        elif line.startswith("---}"):
            in_sql_code_block = False
            if sql_block_expected != None:
                g_statis.num_sql_tested += 1

                actual = executeSql(sql_block)
                if actual == None:
                    actual = "null"
                if not isEqual(sql_block_expected, actual):
                    g_statis.failed += 1
                    # g_statis.failed_sql.append((lino, sql))
                    print(f"at line {sql_block_lino}, sql:\n\033[0;32m{sql_block}\033[0;m")
                    print(f"expected: `\033[0;32m{sql_block_expected}\033[0m`, actual: `\033[0;31m{actual}\033[0m`")
                    # break
                else:
                    g_statis.passed += 1
            else:
                executeSql(sql_block, fetch=False)
            
        elif line.startswith("--"):
            continue
        else:
            if in_sql_code_block:
                sql_block += line + "\n"
                continue
            else:
                sql = line.strip(";").strip()

            if expected != None:
                g_statis.num_sql_tested += 1

                actual = executeSql(sql)
                if actual == None:
                    actual = "null"
                if not isEqual(expected, actual):
                    g_statis.failed += 1
                    # g_statis.failed_sql.append((lino, sql))
                    print(f"at line {lino}, sql: \033[0;32m{sql}\033[0;m")
                    print(f"expected: `\033[0;32m{expected}\033[0m`, actual: `\033[0;31m{actual}\033[0m`")
                    # break
                else:
                    g_statis.passed += 1
                expected = None
            else:
                executeSql(sql, fetch=False)

g_statis.display()
